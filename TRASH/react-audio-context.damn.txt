'use client';

import React, {
  createContext,
  useContext,
  useEffect,
  useRef,
  useState,
} from 'react';
import { resumeAudioContext } from '../lib/utils/audioUtils';

type ReactAudioCtxProviderProps = {
  children: React.ReactNode;
};

type ReactAudioCtxType = {
  audioCtx: AudioContext;
  isSupported: boolean;
};

const ReactAudioCtx = createContext<ReactAudioCtxType | null>(null);

export default function ReactAudioCtxProvider({
  children,
}: ReactAudioCtxProviderProps) {
  const audioCtxRef = useRef<AudioContext | null>(null);
  const [isReady, setIsReady] = useState(false);
  const [isSupported, setIsSupported] = useState(true);

  useEffect(() => {
    if (typeof window !== 'undefined' && !audioCtxRef.current) {
      try {
        const AudioContextClass =
          window.AudioContext || (window as any).webkitAudioContext;
        if (AudioContextClass) {
          audioCtxRef.current = new AudioContextClass({ latencyHint: 0.0001 });

          const handleInteraction = () => {
            if (audioCtxRef.current) {
              resumeAudioContext(audioCtxRef.current).then(() => {
                setIsReady(true);
                window.removeEventListener('click', handleInteraction);
              });
            }
          };

          window.addEventListener('click', handleInteraction);
          return () => {
            window.removeEventListener('click', handleInteraction);
            audioCtxRef.current?.close();
          };
        } else {
          setIsSupported(false);
        }
      } catch (error) {
        console.error('Failed to create AudioContext:', error);
        setIsSupported(false);
      }
    }
  }, []);

  if (!isSupported) {
    return <>{children}</>; // Render children even if not supported

    // return <div>Audio is not supported in your browser.</div>;
  }

  if (!audioCtxRef.current || !isReady) {
    return <>{children}</>; // or a loading component
  }

  return (
    <ReactAudioCtx.Provider
      value={{ audioCtx: audioCtxRef.current, isSupported }}
    >
      {children}
    </ReactAudioCtx.Provider>
  );
}

export function useReactAudioCtx() {
  const context = useContext(ReactAudioCtx);
  if (!context) {
    throw new Error(
      'useReactAudioCtx must be used within a ReactAudioCtxProvider'
    );
  }
  return context;
}
