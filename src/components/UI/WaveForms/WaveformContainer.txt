// src/components/UI/WaveformContainer.tsx
'use client';
import React, { useEffect, useMemo, useState } from 'react';
import Waveform from './Waveform.tuss';
import { useSamplerEngine } from '../../../contexts/EngineContext';
import styles from '../../../styles/Waveform.module.scss';

function WaveformContainer() {
  const { selectedForSettings, getBufferDuration } = useSamplerEngine();

  const [sampleId, setSampleId] = useState<string>('');
  const [bufferDuration, setBufferDuration] = useState<number>(0);

  useEffect(() => {
    const selectedId = selectedForSettings[0];
    const duration = getBufferDuration(selectedId);
    setSampleId(selectedId);
    setBufferDuration(duration);
  }, [selectedForSettings, getBufferDuration]);

  const memoizedWaveDynamic = useMemo(() => {
    if (!sampleId || !bufferDuration || bufferDuration === 0) return null;

    // Calculate width based on buffer duration  // IS THIS CORRECT?
    const pixelsPerSecond = 200; // Adjust this value to change the scaling
    const calculatedWidth = Math.max(
      800,
      Math.ceil(bufferDuration * pixelsPerSecond)
    );

    console.log(
      'Visualizer_cli: memoizedWaveDynamic',
      sampleId,
      bufferDuration
    );

    return (
      <Waveform
        // key={sample.id} // Forces re-render when buffer changes
        // sampleId={sample.id}
        // buffer={buffer}
        width={calculatedWidth}
        height={200}
        color={'#676767'}
        showCenterLine={false}
      />
    );
  }, [sampleId, bufferDuration]);

  return (
    <div className={styles.container}>
      <div className={styles.waveformScroller}>
        {sampleId && bufferDuration && (
          <div key={sampleId}>{memoizedWaveDynamic}</div>
        )}
      </div>
    </div>
  );
}

export default WaveformContainer;
