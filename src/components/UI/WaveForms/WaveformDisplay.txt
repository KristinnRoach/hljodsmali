import SamplerEngine from '../../../lib/SamplerEngine';

import React, { useRef, useEffect, useState } from 'react';
import { useReactAudioCtx } from '../../../contexts/react-audio-context';
import { useSamplerCtx } from '../../../contexts/sampler-context';

const WaveformDisplay: React.FC = () => {
  const { audioCtx } = useReactAudioCtx();
  if (!audioCtx) return null;

  const samplerEngine = SamplerEngine.getInstance(audioCtx);

  const { getSingleSelectedLoadedSample } = useSamplerCtx();

  const currentSample = getSingleSelectedLoadedSample();

  const [startPoint, setStartPoint] = useState<number>(0);

  const isPlaying = samplerEngine.isPlaying();

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [playheadPosition, setPlayheadPosition] = useState<number | null>(null);
  const [waveformRendered, setWaveformRendered] = useState(false);

  const normalizeData = (data: Float32Array): Float32Array => {
    let maxVal = 0;
    for (let i = 0; i < data.length; i++) {
      const absVal = Math.abs(data[i]);
      if (absVal > maxVal) {
        maxVal = absVal;
      }
    }
    return maxVal === 0
      ? data
      : new Float32Array(data.map((val) => val / maxVal));
  };

  useEffect(() => {
    if (!currentSample) return;

    const settings = currentSample.sample.sample_settings;
    const currentStartPoint = settings.startPoint;
    setPlayheadPosition(currentStartPoint);
  }, [currentSample]);

  useEffect(() => {
    if (!canvasRef.current || !currentSample) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const drawWaveform = () => {
      if (!currentSample.buffer) return;
      const { width, height } = canvas;
      ctx.clearRect(0, 0, width, height);

      const data = normalizeData(currentSample.buffer.getChannelData(0));
      const step = Math.ceil(data.length / width);

      ctx.beginPath();
      for (let i = 0; i < width; i++) {
        const x = i;
        const y = ((1 + data[i * step]) * height) / 2;
        ctx.lineTo(x, y);
      }
      ctx.stroke();

      setWaveformRendered(true);
      setPlayheadPosition(0);
    };

    drawWaveform();
  }, [currentSample]);

  useEffect(() => {
    if (!currentSample || !currentSample.buffer || !waveformRendered) return;

    const { startPoint, endPoint } = currentSample.sample.sample_settings;

    const duration = endPoint - startPoint;
    const canvasWidth = canvasRef.current?.width || 500;

    let animationId: number;
    const updatePlayhead = () => {
      const currentTime = samplerEngine.getCurrentPlayheadPosition();
      if (currentTime !== null) {
        const position = (currentTime / duration) * canvasWidth;
        setPlayheadPosition(position);
      }
      animationId = requestAnimationFrame(updatePlayhead);
    };

    updatePlayhead();
    return () => cancelAnimationFrame(animationId);
  }, [currentSample]);

  return (
    <div style={{ position: 'relative' }}>
      <canvas ref={canvasRef} width={500} height={100} />
      {waveformRendered && playheadPosition !== null && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: playheadPosition,
            width: '1px',
            height: '100%',
            backgroundColor: 'red',
          }}
        />
      )}
    </div>
  );
};

export default WaveformDisplay;
