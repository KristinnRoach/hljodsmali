// THIS IS THE OLD VERSION

import SingleUseVoice from './SingleUseVoice';
import { Sample, SampleSettings } from '../types';

export type LoadedSample = {
  sample: Sample;
  buffer: AudioBuffer | null;
  sampleGain: GainNode;
};

/* Singleton class for managing audio playback and recording */

export default class SamplerEngine {
  private static instance: SamplerEngine | null = null;

  private audioContext: AudioContext;
  private mediaRecorder: MediaRecorder | null = null;
  private recordedChunks: Blob[] = [];
  private newRecordedSamples: Sample[] = [];

  private loadedSamples: Map<string, LoadedSample> = new Map();
  private selectedSampleIds: Set<string> = new Set();

  private masterGain: GainNode;

  /* USE STATIC ACTIVE VOICES IN SINGLEUSEVOICE INSTEAD ? DECIDE */
  private activeVoices: Map<string, SingleUseVoice> = new Map();

  /* Constructor */

  private constructor(audioContext: AudioContext) {
    this.audioContext = audioContext;
    this.masterGain = this.audioContext.createGain();
    this.masterGain.gain.value = 0.75;
    this.masterGain.connect(this.audioContext.destination);
    console.log('Audio Engine context: ', this.audioContext);
  }

  /* Get instance */

  public static getInstance(audioContext?: AudioContext): SamplerEngine {
    if (!SamplerEngine.instance) {
      if (!audioContext) {
        throw new Error(
          'AudioContext must be provided when creating AudioEngine instance'
        );
      }
      SamplerEngine.instance = new SamplerEngine(audioContext);
    }
    return SamplerEngine.instance;
  }

  /* Sample Manager */

  loadSample(sample: Sample, buffer: AudioBuffer): LoadedSample {
    // should be void?
    const defaultSettings = this.getDefaultSampleSettings(buffer.duration);

    // Set default values if not present
    const updatedSample: Sample = {
      ...sample,
      bufferDuration: buffer.duration,
      sample_settings: sample.sample_settings
        ? {
            ...defaultSettings,
            ...sample.sample_settings,
          }
        : defaultSettings,
    };

    // prep gain node for individual sample volume control
    const sampleGain = this.audioContext.createGain();
    sampleGain.connect(this.masterGain);
    sampleGain.gain.value =
      sample.sample_settings?.sampleVolume ?? this.masterGain.gain.value;

    const loadedSample: LoadedSample = {
      sample: updatedSample,
      buffer: buffer,
      sampleGain: sampleGain,
    };

    this.loadedSamples.set(sample.id, loadedSample);
    // Set the newly loaded sample as the only selected sample
    this.setSelectedSampleIds([sample.id]);
    return loadedSample;
  }

  addBufferDurationToLoadedSamples(): void {
    this.loadedSamples.forEach((loadedSample, key) => {
      if (loadedSample.buffer.duration) {
        loadedSample.sample.bufferDuration = loadedSample.buffer.duration;
        this.loadedSamples.set(key, loadedSample);
      }
    });
  }

  setSampleVolume(sampleId: string, volume: number) {
    const loadedSample = this.loadedSamples.get(sampleId);
    if (loadedSample) {
      loadedSample.sampleGain.gain.setValueAtTime(
        volume,
        this.audioContext.currentTime
      );
    }
  }

  getDefaultSampleSettings(bufferDuration: number): SampleSettings {
    return {
      startPoint: 0,
      endPoint: bufferDuration,
      loopStart: 0,
      loopEnd: bufferDuration,
      attackTime: 0.02,
      releaseTime: 0.2,
      sampleVolume: this.masterGain.gain.value ?? 0.75,
      loopVolume: this.masterGain.gain.value ?? 0.75,
    };
  }

  removeSample(id: string): void {
    this.loadedSamples.delete(id);
    this.selectedSampleIds.delete(id);
  }

  isSampleLoaded(id: string): boolean {
    return this.loadedSamples.has(id);
  }

  setSelectedSampleIds(ids: string[]): void {
    this.selectedSampleIds = new Set(ids);
  }

  getSelectedSampleIds(): string[] {
    return Array.from(this.selectedSampleIds);
  }

  getSelectedSampleObjects(): Sample[] {
    if (this.selectedSampleIds.size === 0) {
      return [];
    }
    return Array.from(this.selectedSampleIds)
      .map((id) => this.loadedSamples.get(id)?.sample)
      .filter((sample): sample is Sample => sample !== undefined);
  }

  getLoadedSamples(): LoadedSample[] {
    return Array.from(this.loadedSamples.values());
  }

  getSelectedLoadedSamples(): LoadedSample[] {
    return Array.from(this.loadedSamples.values()).filter((loadedSample) =>
      this.selectedSampleIds.has(loadedSample.sample.id)
    );
  }

  updateSampleSettings(id: string, settings: Partial<SampleSettings>) {
    try {
      this.updateSelectedSampleSettings(id, settings);
      this.updateActiveVoiceSettings(id, settings);
    } catch (error) {
      console.error(`Error updating sample ${id}:`, error);
    }
  }

  private updateSelectedSampleSettings(
    id: string,
    settings: Partial<SampleSettings>
  ) {
    const loadedSample = this.loadedSamples.get(id); // only iterate over selected (loaded) samples?

    if (loadedSample) {
      loadedSample.sample = {
        ...loadedSample.sample,
        sample_settings: {
          ...loadedSample.sample.sample_settings,
          ...settings,
        },
      };
    }
  }

  private updateActiveVoiceSettings(
    id: string,
    settings: Partial<SampleSettings>
  ) {
    if (
      'sample_settings' in settings &&
      ('loopStart' in settings ||
        'loopEnd' in settings ||
        'loopVolume' in settings)
      // || 'attackTime' in settings ||
      // 'releaseTime' in settings ||
    ) {
      const activeVoiceKeys = Array.from(this.activeVoices.keys());
      activeVoiceKeys.forEach((voiceKey) => {
        const [sampleId] = voiceKey.split('-');
        if (sampleId === id) {
          const voice = this.activeVoices.get(voiceKey);
          if (voice) {
            voice.updateLoop(
              settings.loopStart ?? undefined,
              settings.loopEnd ?? undefined,
              settings.loopVolume ?? undefined
            );
          }
        }
      });
    }
  }

  // saveSettings(): Promise<Sample[]> {
  //   // Save updated sample settings for selected samples
  //   const selectedSamples = this.getSelectedSampleObjects().map(
  //     (s) => s.sample
  //   );
  //   return Promise.all(
  //     selectedSamples.map(async (sample) => {
  //       await updateSampleRecord(sample);
  //       return sample;
  //     })
  //   );
  // }

  /* Playback */

  // if source.loop can be modified after source.start --> keep the state of isLoopOn in SingleUseVoice

  playNote(midiNote: number, isLoopOn: boolean): void {
    const selected = this.getSelectedLoadedSamples();
    selected.forEach((loadedSample) => {
      if (loadedSample) {
        // loadedSample.sample.sample_settings && loadedSample.buffer && loadedSample.sampleGain
        const voice = new SingleUseVoice(
          this.audioContext,
          isLoopOn,
          loadedSample.sample.sample_settings.sampleVolume,
          loadedSample.buffer,
          loadedSample.sample.sample_settings
        );
        voice.voiceGain.connect(loadedSample.sampleGain);
        loadedSample.sampleGain.connect(this.masterGain);
        this.masterGain.connect(this.audioContext.destination);
        voice.start(
          midiNote
          // this.masterGain.gain.value,
          // loadedSample.sample.sample_settings.attackTime
        );

        const voiceKey = `${loadedSample.sample.id}-${midiNote}`;
        this.activeVoices.set(voiceKey, voice);
      }
    });
  }

  releaseNote(midiNote: number, isLoopOn: boolean): void {
    const selectedSamples = this.getSelectedLoadedSamples();
    selectedSamples.forEach((loadedSample) => {
      const voiceKey = `${loadedSample.sample.id}-${midiNote}`;
      const voice = this.activeVoices.get(voiceKey);
      if (voice) {
        voice.release(); // loadedSample.sample.sample_settings.releaseTime

        if (voice.getLoop()) {
          // ||Â isLoopOn ?
          // if (loadedSample.sampleGain.gain.value !== voice.loopVolume)
          //   loadedSample.sampleGain.gain.setValueAtTime(
          //     loadedSample.sampleGain.gain.value,
          //     this.audioContext.currentTime // + voice.releaseTime
          //   );
          // loadedSample.sampleGain.gain.linearRampToValueAtTime(
          //   voice.loopVolume,
          //   this.audioContext.currentTime + voice.releaseTime
          // );
        } else {
          // voice.release(); // loadedSample.sample.sample_settings.releaseTime

          // Wait for release time before removing voice from activeVoices // is this necessary?
          setTimeout(() => {
            this.activeVoices.delete(voiceKey);
          }, voice.releaseTime * 1000);
        }
      }
    });
  }

  releaseAllNotes(): void {
    let longestReleaseTime = 0;
    const activeVoiceKeys = Array.from(this.activeVoices.keys());

    activeVoiceKeys.forEach((voiceKey) => {
      const voice = this.activeVoices.get(voiceKey);
      if (voice) {
        longestReleaseTime = Math.max(voice.releaseTime, longestReleaseTime);
        voice.release();
      }
    });

    // Wait for all notes to release before clearing activeVoices
    setTimeout(() => {
      this.activeVoices.clear();
      console.log('All notes released. Active voices cleared.');
    }, longestReleaseTime * 1000);
  }

  releaseAllLoops(): void {
    const activeVoiceKeys = Array.from(this.activeVoices.keys());

    activeVoiceKeys.forEach((voiceKey) => {
      const voice = this.activeVoices.get(voiceKey);

      if (voice && voice.getLoop()) {
        voice.setLoop(false);
        // voice.release();
        this.activeVoices.delete(voiceKey);
      }
    });
    console.log('releaseAllLoops called. Active voices: ', this.activeVoices);
  }

  setMasterVolume(volume: number) {
    this.masterGain.gain.setValueAtTime(volume, this.audioContext.currentTime);
    this.activeVoices.forEach((voice) => {
      // voice.updateVolume(volume);
    });
  }

  getMasterVolume(): number {
    if (!this.masterGain.gain.value) {
      throw new Error('Master gain node not set up');
    }
    return this.masterGain.gain.value;
  }

  // clicks?
  // this.masterGain.gain.setValueAtTime(this.masterGain.gain.value, this.audioContext.currentTime);
  // this.masterGain.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.02);

  /* Recording */

  async setupRecording() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    this.mediaRecorder = new MediaRecorder(stream);

    this.mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        this.recordedChunks.push(event.data);
      }
    };
  }

  startRecording() {
    if (!this.mediaRecorder) {
      console.error('Media Recorder not set up');
      this.setupRecording();
      return;
    }
    this.recordedChunks = [];
    this.mediaRecorder!.start();
  }

  async stopRecording(): Promise<void> {
    if (!this.mediaRecorder) {
      throw new Error('Media Recorder not set up');
    }

    return new Promise((resolve, reject) => {
      this.mediaRecorder!.onstop = async () => {
        try {
          const blob = new Blob(this.recordedChunks, { type: 'audio/webm' });
          const arrayBuffer = await blob.arrayBuffer();
          const audioBuffer = await this.audioContext.decodeAudioData(
            arrayBuffer
          );

          const newSample: Sample = this.createNewSampleObject(
            `new-sample: ${this.newRecordedSamples.length + 1}`,
            blob,
            audioBuffer.duration
          );

          this.newRecordedSamples.push(newSample);

          await this.loadSample(newSample, audioBuffer);
          resolve();
          this.setupRecording(); // Reset media recorder here?
        } catch (error) {
          reject(error);
        }
      };

      this.mediaRecorder!.stop();
    });
  }

  getNewRecordings(): Sample[] {
    const newRecordings = [...this.newRecordedSamples];
    this.newRecordedSamples = [];
    return newRecordings;
  }

  createNewSampleObject(name: string, blob: Blob, duration: number): Sample {
    const file = new File([blob], name + '.webm', { type: 'audio/webm' }); // check for consistency
    const slug = name.toLowerCase().replace(/ /g, '-');

    const defaultSettings = this.getDefaultSampleSettings(duration);

    const sample: Sample = {
      id: `new-sample: ${this.newRecordedSamples.length + 1}`,
      name: name,
      slug: slug,
      user: 'user', // Add user ID
      sample_file: file + '',
      created: new Date().toISOString(),
      updated: new Date().toISOString(),
      bufferDuration: duration,
      sample_settings: defaultSettings,
    };

    //   endPoint: duration,
    //   loopStart: 0,
    //   loopEnd: duration,
    //   attackTime: 0.02,
    //   releaseTime: 0.2,
    //   sampleVolume: this.masterGain.gain.value,
    //   loopVolume: this.masterGain.gain.value,
    // },

    return sample;
  }
}

// playNote(midiNote: number, isLoopOn: boolean): void {
//   console.log('Starting voice, isLooping:', isLoopOn);

//   const selectedSamples = this.getSelectedSamples();
//   selectedSamples.forEach((loadedSample) => {
//     if (loadedSample && loadedSample.buffer) {
//       const voice = new SingleUseVoice(
//         this.audioContext,
//         loadedSample.buffer,
//         this.masterGain, // see if need to create new gain node
//         loadedSample.sample.startPoint,
//         loadedSample.sample.endPoint,
//         isLoopOn,
//         0.02,
//         0.2
//       );
//       const rate = 2 ** ((midiNote - 60) / 12); // Convert MIDI note to playback rate
//       voice.start(rate, 1, loadedSample.sample.attackTime!); // add master volume

//       const voiceKey = `${loadedSample.sample.id}-${midiNote}`;
//       this.activeVoices.set(voiceKey, voice);
//     }
//   });
// }

// private updateLoadedSampleSettings(id: string, settings: Partial<Sample>) {
//   const loadedSample = this.loadedSamples.get(id);
//   if (loadedSample) {
//     loadedSample.sample = { ...loadedSample.sample, ...settings };
//   }
// }

// this.activeVoices.forEach((voice, key) => {
//   const [sampleId, midiNoteStr] = key.split('-');
//   // const midiNote = parseInt(midiNoteStr, 10);
//   const sample = this.loadedSamples.get(sampleId);
//   if (sample && voice) {
//     voice.release(); // sample.sample.releaseTime!
//     longestReleaseTime = Math.max(voice.releaseTime, longestReleaseTime);
//   }
// });
// wait for all notes to release before clearing activeVoices
// setTimeout(() => {
//   this.activeVoices.clear();
//   console.log('All notes released. Active voices cleared.');
// }, longestReleaseTime * 1000);
// }
//   console.log('activeVoices: ', this.activeVoices);
//   this.activeVoices.clear();
//   console.log('All notes released. Active voices cleared.');
// }

// private playSingleSample(loadedSample: LoadedSample, rate: number): void {
//   console.log('Playing note');

//   const { startPoint, endPoint, attackTime, releaseTime } =
//     loadedSample.sample;
//   const source = this.audioContext.createBufferSource();
//   source.buffer = loadedSample.buffer;

//   const gainNode = this.audioContext.createGain();
//   source.connect(gainNode);
//   gainNode.connect(this.masterGain);

//   const now = this.audioContext.currentTime;
//   gainNode.gain.setValueAtTime(0, now);
//   gainNode.gain.linearRampToValueAtTime(1, now + attackTime!);
//   gainNode.gain.setValueAtTime(
//     1,
//     now + (endPoint! - startPoint!) - releaseTime!
//   );
//   gainNode.gain.linearRampToValueAtTime(0, now + (endPoint! - startPoint!));

//   source.playbackRate.value = rate;
//   source.start(now, startPoint, endPoint! - startPoint!);
// }

// playSingleSample(loadedSample: LoadedSample, note: string, rate: number) {
//     const { sample, buffer } = loadedSample;
//     if (!buffer) return;

//     const voice = new SingleUseVoice(
//     this.audioContext,
//     buffer,
//     this.masterGain,
//     sample.startPoint,
//     sample.endPoint
//     );

//     voice.start(rate, 0.75, sample.attackTime!);
//     voice.key = note;
//     this.voices.set(note, voice);
// }

//   playNote(key: string, rate: number) {
//     if (this.voices.has(key)) {
//       this.stopNote(key);
//     }

//     const voice = new SingleUseVoice(
//       this.audioContext,
//       this.buffer,
//       this.masterGain,
//       this.startPoint,
//       this.endPoint
//     );

//     voice.start(rate, 0.75, this.attackTime);
//     this.voices.set(key, voice);
//   }

//   stopNote(key: string) {
//     const voice = this.voices.get(key);
//     if (voice) {
//       voice.release(this.releaseTime);
//       this.voices.delete(key);
//     }
//   }

// async loadSample(sample: Sample, audioBuffer: AudioBuffer): Promise<void> {
//   if (this.loadedSamples.has(sample.id)) {
//     return;
//   }
//   try {
//     this.loadedSamples.set(sample.id, {
//       sample: {
//         ...sample,
//         duration: audioBuffer.duration,
//         // Set default values if not present
//         sample_settings: sample.sample_settings
//           ? {
//               ...sample.sample_settings,
//               startPoint: sample.sample_settings.startPoint ?? 0,
//               endPoint:
//                 sample.sample_settings.endPoint ?? audioBuffer.duration,
//               loopStart: sample.sample_settings.loopStart ?? 0,
//               loopEnd: sample.sample_settings.loopEnd ?? audioBuffer.duration,
//               attackTime: sample.sample_settings.attackTime ?? 0.02,
//               releaseTime: sample.sample_settings.releaseTime ?? 0.2,
//               sampleVolume:
//                 sample.sample_settings.sampleVolume ??
//                 this.masterGain.gain.value,
//               loopVolume:
//                 sample.sample_settings.loopVolume ??
//                 this.masterGain.gain.value,
//             }
//           : {
//               startPoint: 0,
//               endPoint: audioBuffer.duration,
//               loopStart: 0,
//               loopEnd: audioBuffer.duration,
//               attackTime: 0.02,
//               releaseTime: 0.2,
//               sampleVolume: this.masterGain.gain.value,
//               loopVolume: this.masterGain.gain.value,
//             },
//       },
//       buffer: audioBuffer,
//     });
//     console.log('Loaded sample: ', sample);

//     // Set the newly loaded sample as the only selected sample
//     this.setSelectedSampleIds([sample.id]);
//   } catch (error) {
//     console.error(
//       'Failed to fetch or decode buffer in SamplerEngines loadSample:',
//       error
//     );
//   }
//   console.log('Loaded samples: ', this.loadedSamples);
// }
